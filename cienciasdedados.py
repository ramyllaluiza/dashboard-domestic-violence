# -*- coding: utf-8 -*-
"""cienciasdedados.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Ed238W70KSx4ArRTcJge6F9Dt9M28uQX
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Carregar o dataset
df = pd.read_csv("DomesticViolence.csv")
df.columns = df.columns.str.strip()

# Imports principais
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Configurações estéticas
sns.set(style="whitegrid")
plt.rcParams['figure.figsize'] = (12,6)

# Carregar os dados
df = pd.read_csv('DomesticViolence.csv')
# Exibir primeiras linhas
df.head()

# Verificar colunas
print("Colunas:", df.columns)
print("Número de colunas:", len(df.columns))

import pandas as pd

# Lê o arquivo original
df = pd.read_csv('DomesticViolence.csv')

# Remove espaços extras dos nomes das colunas
df.columns = df.columns.str.strip()

# Renomear colunas
df = df.rename(columns={
    'SL. No': 'id',
    'Age': 'age',
    'Education': 'education',
    'Employment': 'employment',
    'Income': 'income',
    'Marital status': 'marital_status',
    'Violence': 'violence'
})

# Corrigir erro de digitação na coluna marital_status, preencher nulos e padronizar texto
df['marital_status'] = df['marital_status'].fillna('unknown').astype(str).str.lower().str.strip()
df['marital_status'] = df['marital_status'].replace({'unmarred': 'unmarried'})

# Mapear marital_status para números (0 = unmarried, 1 = married, -1 = unknown)
df['marital_status'] = df['marital_status'].map({
    'unmarried': 0,
    'married': 1,
    'unknown': -1
})

# Padronizar colunas categóricas restantes, tratando nulos
for col in ['education', 'employment', 'violence']:
    df[col] = df[col].fillna('unknown').astype(str).str.lower().str.strip()

# Mapear education para níveis numéricos
df['education'] = df['education'].map({
    'none': 0,
    'primary': 1,
    'secondary': 2,
    'tertiary': 3,
    'unknown': -1
})

# Mapear employment para níveis numéricos
df['employment'] = df['employment'].map({
    'unemployed': 0,
    'semi employed': 1,
    'employed': 2,
    'unknown': -1
})

# Mapear violence para booleano (False = no, True = yes, None para unknown)
df['violence'] = df['violence'].map({
    'no': False,
    'yes': True,
    'unknown': None
})

# Ajustar income: converter para número, preencher valores ausentes com zero
df['income'] = pd.to_numeric(df['income'], errors='coerce').fillna(0).astype(int)

# Salvar o arquivo tratado
df.to_csv('dados_tratados.csv', index=False)

print("Arquivo 'dados_tratados.csv' criado com sucesso!")

print("Colunas originais:", df.columns.tolist())

print("====== RESUMO DO DATASET ======\n")

# Formato
print(f"Formato do dataset: {df.shape[0]} linhas x {df.shape[1]} colunas\n")

# Tipos de dados e nulos
print("Colunas, tipos e valores ausentes:")
print(df.dtypes.to_frame('Tipo').join(df.isnull().sum().to_frame('Nulos')))
print()

# Valores únicos
print("Valores únicos por coluna:")
print(df.nunique().to_frame('Valores únicos'))

# Imports principais
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Configurações estéticas
sns.set(style="whitegrid")
plt.rcParams['figure.figsize'] = (12,6)

# Carregar os dados
df = pd.read_csv('dados_tratados.csv')
# Exibir primeiras linhas
df.head()

# IDADES: Valores e Quantidades
print(df['age'].value_counts().sort_index())

# Educação:
# Converte a coluna para números inteiros, aceita valores nulos (Int64 permite isso)
df['education'] = pd.to_numeric(df['education'], errors='coerce').astype('Int64')

# Define a ordem desejada, incluindo o -1 para 'Desconhecido'
order = [-1, 0, 1, 2, 3]

# Conta as ocorrências e reorganiza conforme a ordem, preenchendo com zero quando faltar
counts = df['education'].value_counts()
ordered_counts = counts.reindex(order).fillna(0).astype(int)

# Mapeia os rótulos legíveis
level_names = {
    -1: 'Desconhecido',
     0: 'Sem escolaridade',
     1: 'Primário',
     2: 'Ensino médio',
     3: 'Superior'
}

# Renomeia os índices para nomes legíveis
ordered_counts.index = ordered_counts.index.map(level_names)

# Exibe o resultado
print(ordered_counts)

# RENDA
print(df['income'].value_counts().sort_index())

# ESTADO CIVIL
print(df['marital_status'].value_counts(dropna=False).sort_index())

# Opcional: mostrar também com os nomes legíveis
status_labels = {
    -1: 'Desconhecido',
    0: 'Solteira',
    1: 'Casada'
}

counts_named = df['marital_status'].value_counts(dropna=False).sort_index().rename(index=status_labels)

# VIOLÊNCIA:
print(df['violence'].unique())

# Ordem que faz sentido para booleanos: False (no), True (yes)
order = [False, True]

# Contar e reordenar conforme a ordem, substituindo NaN/None por 0
counts = df['violence'].value_counts(dropna=False)
ordered_counts = counts.reindex(order).fillna(0).astype(int)

ordered_counts.index = ordered_counts.index.map({False: 'no', True: 'yes'})

print(ordered_counts)

import seaborn as sns
import matplotlib.pyplot as plt

# Estilo visual bonito e limpo
sns.set(style="whitegrid", palette="deep", font_scale=1.2)

# Tamanho do gráfico
plt.figure(figsize=(12, 6))

# Histograma com curva KDE, cor azul padrão sns
sns.histplot(df['age'], kde=True, bins=10, color=sns.color_palette("deep")[0], edgecolor='black')

# Títulos e rótulos
plt.title('Distribuição de Idades da Amostra', fontsize=18, weight='bold')
plt.xlabel('Idade', fontsize=14)
plt.ylabel('Contagem', fontsize=14)

# Grid mais suave
plt.grid(True, linestyle='--', alpha=0.5)

# Ajuste de layout
plt.tight_layout()
plt.show()

import matplotlib.pyplot as plt

counts = df['violence'].value_counts(dropna=False).sort_index()

plt.figure(figsize=(6,4))
counts.plot(kind='bar', color=['#1f77b4', '#d62728', '#aec7e8'])  # azul, vermelho, azul clarinho para desconhecido

plt.title('Casos de Violência Doméstica', fontsize=14, weight='bold')
plt.xlabel('Violência')
plt.ylabel('Quantidade')
plt.xticks(ticks=[0,1,2], labels=['Não', 'Sim', 'Desconhecido'], rotation=0)

plt.tight_layout()
plt.show()

import matplotlib.pyplot as plt
import seaborn as sns

# Traduz os códigos do estado civil para texto (pra ficar legível no gráfico)
df['marital_status_label'] = df['marital_status'].map({
    0: 'Solteira',
    1: 'Casada',
    -1: 'Desconhecido'
})

plt.figure(figsize=(8, 6))

# Paleta azul e vermelho para violência False e True
sns.countplot(data=df, x='marital_status_label', hue='violence', palette=['#1f77b4', '#d62728'])

plt.title('Casos de Violência por Estado Civil', fontsize=16, weight='bold')
plt.xlabel('Estado Civil')
plt.ylabel('Número de Casos')
plt.legend(title='Violência', labels=['Não', 'Sim'])
plt.tight_layout()
plt.show()

plt.figure(figsize=(8,5))

renda_categoria = pd.cut(df['income'], bins=[-1, 1000, 2000, 3000, float('inf')],
                         labels=["Até 1k", "1k-2k", "2k-3k", "3k+"])

sns.countplot(x=renda_categoria, hue=df['violence'], palette=['#1f77b4', '#d62728'])

plt.title('Casos de Violência por Faixa de Renda', fontsize=16, weight='bold')
plt.xlabel('Faixa de Renda')
plt.ylabel('Número de Casos')
plt.legend(title='Violência', labels=['Não', 'Sim'])
plt.tight_layout()
plt.show()

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Carrega os dados
df = pd.read_csv('dados_tratados.csv')

# Remove a coluna 'id' antes de calcular a correlação
df_sem_id = df.drop(columns=['id'])

# Calcula a matriz de correlação apenas com colunas numéricas
correlation_matrix = df_sem_id.corr(numeric_only=True)

# Plota o heatmap
plt.figure(figsize=(10, 6))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt=".2f", linewidths=0.5)
plt.title('Gráfico de Correlação')
plt.show()